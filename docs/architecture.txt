smpp34 is designed to be a well behaved OTP application.

This is so that it behaves properly when stacked up and used by
other OTP applications.

Components
==========

smpp34 is made up of a set of components, which have clearly defined
tasks, and communicate with each other via messages.

The components are:

tcptx - The TCP transmitter. This is responsible for all OUTBOUND tcp
        communcation. It takes in records representing the PDU and then
		packs them into binary before sending them on their merry way 
		on the network.

tcprx - The TCP receiver. This is responsible for all INBOUND tcp 
        communication. It takes in binary PDUs from the network and
		unpacks them into erlang records representing the PDU. Then
		delivers them to a PDU aware receiver, PduRx

pdurx - The PDU aware receiver. This where all incoming PDUs get delivered
        after being unpacked. pdurx is protocol aware and is responsible for
		taking some actions on the PDU before delivering them to its owner
		process. Some of the actions taken on pdus include:

			#enquire_link{}: pdurx will construct an enquire_link_resp{} pdu
		                     and send to tcptx for delivery
			#unbind{}: pdurx will construct an unbind_resp{} pdu and deliver
					   to tcptx for delivery, then it will die. 
			#unbind_resp{}: die :)

snum - Generates sequence numbers. It is used by tcptx to add sequence numbers
       outgoing PDUs that do not have sequence numbers already.

smpp34 - This is a gen_server that actually orchestrates the functioning of
	     the other components. More accurately, it starts the creation process
		 and initiates a normal teardown when the need arises. 


Supervision Tree
================

Because smpp34 wants to be a properly behaved OTP citizen, it has a well defined
supervision tree. Every component described above, apart from the smpp34
gen_server is part of that supervision tree. The reason why the smpp34
gen_server is not part of that tree is because it is mean to be used
interactively, so supervising it does not make sense.

The tree is described next.

+ smpp34_app
    + smpp34_sup [one_for_one]
		+ smpp34_tcptx_sup [simple_one_for_one]
			+ smpp34_tcptx [temporary]
		+ smpp34_tcprx_sup [simple_one_for_one]
			+ smpp34_tcprx [temporary]
		+ smpp34_pdurx_sup [simple_one_for_one]
			+ smpp34_pdu   [temporary]
		+ smpp34_snum_sup  [simple_one_for_one]
			+ smpp34_snum  [temporary]


In the illustration shown, the smpp34_app is the application callback which
starts the smpp34_sup the top-level supervisor (a one_for_one supervisor).

smpp34_sup starts all the other supervisors:
	smpp34_tcptx_sup
	smpp34_tcprx_sup
	smpp34_pdurx_sup
	smpp34_snum_sup

These next level of supervisors are all simple_one_for_one supervisors.

Once all these are started, the smpp34 library is ready to be used. Using
the library then just involves asking the second level supervisors to 
start an instance of their child_spec. This is exactly what the smpp34 
gen_server does.


smpp34:connect/2 (a.k.a Startup)
================================

